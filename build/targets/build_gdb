#!/bin/bash
set -e
set -x
set -o pipefail

. "${GITHUB_WORKSPACE}/build/common_lib.sh"
. "${GITHUB_WORKSPACE}/build/build_lib.sh"

. "${GITHUB_WORKSPACE}/build/libs/libpopt.sh"
. "${GITHUB_WORKSPACE}/build/libs/build_pcre.sh"
. "${GITHUB_WORKSPACE}/build/libs/glib.sh"
. "${GITHUB_WORKSPACE}/build/libs/util-linux.sh"
. "${GITHUB_WORKSPACE}/build/libs/babeltrace.sh"

. "${GITHUB_WORKSPACE}/build/libs/build_zlib.sh"
. "${GITHUB_WORKSPACE}/build/libs/elfutils.sh"

. "${GITHUB_WORKSPACE}/build/libs/build_libgmp.sh"

. "${GITHUB_WORKSPACE}/build/libs/libmpfr.sh"

. "${GITHUB_WORKSPACE}/build/libs/build_ncurses.sh"

. "${GITHUB_WORKSPACE}/build/libs/build_libipt.sh"

. "${GITHUB_WORKSPACE}/build/libs/build_libexpat.sh"

. "${GITHUB_WORKSPACE}/build/libs/libxxhash.sh"

. "${GITHUB_WORKSPACE}/build/libs/xzutils.sh"

GDB_VERSION="${GDB_VERSION:-10.2}"
#GDB_URL="ftp://sourceware.org/pub/gdb/releases/gdb-${GDB_VERSION}.tar.xz"
GDB_URL="https://ftp.gnu.org/gnu/gdb/gdb-${GDB_VERSION}.tar.xz"
GDB_SRC_DIR="${BUILD_DIRECTORY}/gdb"
GDB_BUILD_DIR="${BUILD_DIRECTORY}/gdb-build"


# TODO:
#   checking for libdebuginfod >= 0.179... no
#   configure: WARNING: libdebuginfod is missing or unusable; some features may be unavailable.
#   configure: WARNING: python is missing or unusable; some features may be unavailable.
#   configure: WARNING: babeltrace is missing or unusable; GDB is unable to read CTF data. (libbabeltrace)
# GDB can use libxxhash and liblzma if they are present.
build_gdb() (
  curl -sLo 'gdb.tar.xz' "${GDB_URL}"
  common::extract 'gdb.tar.xz' "${GDB_SRC_DIR}" > /dev/null
  common::safe_cd "${GDB_SRC_DIR}"
  
  if [ "${CURRENT_ARCH}" != "x86-64" ]; then
    cc_for_build_value="/x86_64-linux-musl-cross/bin/x86_64-linux-musl-gcc"
    cxx_for_build_value="/x86_64-linux-musl-cross/bin/x86_64-linux-musl-g++"
    # Libs bundled with GDB fail to compile because they expect host ar to be in PATH named as "(host-triplet)-ar",
    #   but muslcc containers have cross tools installed as default ones (thus ar is named just as "ar").
    ln -s "/bin/ar" "/bin/$(build::get_host_triplet)-ar"
  fi

  # GDB requires a separate build dir.
  mkdir -p "${GDB_BUILD_DIR}"
  common::safe_cd "${GDB_BUILD_DIR}"

  # Build options manual: https://sourceware.org/gdb/current/onlinedocs/gdb/Configure-Options.html
  # GDB requires build compiler for cross-compilation.
  # Originally it was "CPP_FOR_BUILD=..." instead of "CXX_FOR_BUILD=...", fixed it.
  # How to build with libipt:
  #   https://easyperf.net/blog/2019/08/30/Intel-PT-part2
  #   https://bugzilla.redhat.com/show_bug.cgi?id=1526617#c5
  #   http://sourceware-org.1504.n7.nabble.com/Could-not-use-quot-record-btrace-quot-even-if-I-have-Intel-PT-hardware-feature-td412196.html
  # NOTE: GDB searches for some libs only in default install paths. There are no --with-*=* options for such libs.
  CFLAGS="${GCC_OPTS}" \
    CXXFLAGS="${GXX_OPTS}" \
    LDFLAGS="-static" \
    CC_FOR_BUILD="${cc_for_build_value}" \
    CXX_FOR_BUILD="${cxx_for_build_value}" \
    "${GDB_SRC_DIR}/configure" \
      --build="x86_64-linux-musl" \
      --host="$(build::get_host_triplet)" \
      --disable-dependency-tracking \
      --disable-shared \
      --enable-static \
      --disable-nls \
      --enable-gdbserver \
      --disable-binutils \
      --disable-ld \
      --disable-gold \
      --disable-gas \
      --disable-sim \
      --disable-gprof \
      --disable-inprocess-agent
  # debug
  make -j 4
  strip "${GDB_BUILD_DIR}/gdb/gdb" "${GDB_BUILD_DIR}/gdbserver/gdbserver"
)

main() (
  if [ "$#" -ne 1 ]; then
    echo "Usage: ${0} <arch>"
    echo "Example: ${0} x86-64"
    exit 1
  fi

  build::init "$1"
  # build_libgmp
  # build_libmpfr
  # build_ncurses
  # build_libipt
  # build_libexpat
  
  #build_zlib
  #build_elfutils
  
  build_pcre
  build_glib
  build_libpopt
  build_libuuid
  # PROBLEM: gdb badly links to babeltrace (apparently it doesn't use '--static' in pkg-config invocation,
  #   missing some libs in CFLAGS/LDFLAGS as a result).
  build_babeltrace

  build_libxxhash

  build_liblzma

  build_gdb

  cp "${GDB_BUILD_DIR}/gdb/gdb" "${OUTPUT_DIRECTORY}/gdb-${GDB_VERSION}"
  cp "${GDB_BUILD_DIR}/gdbserver/gdbserver" "${OUTPUT_DIRECTORY}/gdbserver-${GDB_VERSION}"
  echo "[+] Finished building GDB for ${CURRENT_ARCH}"

  echo ::set-output name=PACKAGED_NAME::"gdb-${GDB_VERSION}-${CURRENT_ARCH}"
  echo ::set-output name=PACKAGED_NAME_PATH::"${OUTPUT_DIRECTORY}/*"
)

main "$@"
